trigger:
  - develop  # Runs when code is pushed to develop branch

pool:
  vmImage: 'ubuntu-22.04'

variables:
- group: Terraform_Variables  # Load predefined variables from Azure DevOps Library
- name: AZURE_SERVICE_CONNECTION
  value: 'AzureTerraformService'
- name: TF_WORKING_DIR
  value: 'infra/terraform'
- name: RESOURCE_GROUP_NAME
  value: 'TerraformStateRG'

jobs:
  - job: TerraformInit
    displayName: 'Initialize Terraform'
    steps:
      - task: TerraformInstaller@0
        inputs:
          terraformVersion: '1.7.5'  # Use your preferred Terraform version

      - task: TerraformTaskV4@4
        displayName: 'Terraform Init'
        inputs:
          provider: 'azurerm'
          backendServiceArm: $(AZURE_SERVICE_CONNECTION)
          backendAzureRmResourceGroupName: $(RESOURCE_GROUP_NAME)
          backendAzureRmStorageAccountName: $(storageAccountName)
          backendAzureRmContainerName: $(containerName)
          backendAzureRmKey: $(accessKey)
          command: 'init'
          workingDirectory: $(TF_WORKING_DIR)
          
      - task: TerraformTaskV4@4
        displayName: 'Terraform Validate'
        inputs:
         provider: 'azurerm'
         command: 'validate'
         workingDirectory: $(TF_WORKING_DIR)

      - task: PublishPipelineArtifact@1
        displayName: 'Publish Terraform State'
        inputs:
          targetPath: $(TF_WORKING_DIR)
          artifactName: 'terraform-state'
  
  - job: TerraformPlan
    displayName: 'Terraform Plan'
    dependsOn: TerraformInit
    steps:
      - task: DownloadPipelineArtifact@2
        displayName: 'Download Terraform State'
        inputs:
          artifactName: 'terraform-state'
          downloadPath: $(TF_WORKING_DIR)

      - task: TerraformTaskV4@4
        displayName: 'Terraform Plan'
        inputs:
          provider: 'azurerm'
          command: 'plan'
          environmentServiceNameAzureRM: $(AZURE_SERVICE_CONNECTION)
          workingDirectory: $(TF_WORKING_DIR)
  
  # - job: waitForValidation
  #   displayName: 'Wait for External Validation'
  #   pool: server
  #   timeoutInMinutes: 4320  # 3 days timeout
  #   dependsOn: TerraformPlan
  #   steps:
  #     - task: ManualValidation@0
  #       timeoutInMinutes: 1440  # 1 day timeout
  #       inputs:
  #         notifyUsers: $(approvalEmail)
  #         instructions: 'Please validate the Terraform Plan before applying'
  #         onTimeout: 'resume'

  - deployment: TerraformApply
    displayName: 'Terraform Apply'
    environment: stage  # Change based on your environment
    dependsOn: TerraformPlan
    strategy:
      runOnce:
        deploy:
          steps:
            - task: DownloadPipelineArtifact@2
              displayName: 'Download Terraform State'
              inputs:
                artifactName: 'terraform-state'
                downloadPath: $(TF_WORKING_DIR)

            - task: TerraformTaskV4@4
              displayName: 'Apply Terraform Plan'
              inputs:
                provider: 'azurerm'
                command: 'apply'
                backendServiceArm: $(AZURE_SERVICE_CONNECTION)
                commandOptions: '--auto-approve'
                environmentServiceNameAzureRM: $(AZURE_SERVICE_CONNECTION)
                workingDirectory: $(TF_WORKING_DIR)